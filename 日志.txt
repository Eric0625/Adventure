2016.04.01
至今完成的部分：文字消息显示的处理，战斗引擎，人物，技能，装备，状态（部分），人物已经可以打斗，信息输出也已经比较完整
2016.04.02
今天完成了房间的部分功能，已可以通过类实现静态房间，但仍需要考虑房间的动态生成，并将之作为主要的房间生成方式。另外，还有气候，特殊房间模板，人物走动，房间销毁与再生，房间机关触发等等需要考虑。初步考虑用xml文件作为
描述动态房间的格式
2016.04.03
加入NPC动态说话，从此人物有了生气
将玩家类和人形NPC分开来，虽然具备共同的特性如肢体，默认动作，但NPC还有不同的行为特征，并且存在非人形NPC，所以必须有两个不同的继承方向，目前的继承树如下：
KCharacter（生物）：会战斗的任何物体
/                                 \
KUser（玩家）：需要互动的对象                       KNPC（电脑控制的生物）：需要自动行走，聊天和出发互动
/               |              \
KPerson（人形生物）       KBeast          KDragon等等
2016.04.04
01:22 在复制NPC上遇到重大困难，应该使用构造函数复制还是clone？
10:09 决定使用clone，因为构造函数无法读取源的私有成员复制
实现了所有需要的clone函数，并增加KEntity类作为实体类的根，其它skill等类均为非实体类
今天实现了房间的动态加载，实现了所有需要复制的类的clone函数，目前看来运作良好
下一步：实现NPC的随机走动，添加一个区域。
最艰难的部分似乎已经跨过
2016.04.05
建立新的房间检索机制，通过建立房间名字典，以字符串为桥梁，在代码中以字符串形式初始化区域，这样要好于直接用数字
2016.04.06
在物品和人物检索中尝试使用枚举，这有可能会在数量较多时出现问题。
实现了人物点击的互动
目前需要完成的：NPC的刷新，尸体的生成，物品的拾取，物品的重量，物品嵌套
2016.04.07
生成尸体时需要解决物品在容器间移动的问题，由此需要解决容器嵌套和移动函数的重构，不是个简单的问题
已解决嵌套，下一步完全实现物品移动
2016.04.08
实现了物品的点击互动
将物品的移动函数重构到kentity类中，并实现物品的完全嵌套，物品重量和拾取已实现，拾取还差容器的
取消了单个的物品装备位置指针，改用装备位枚举标志标识，缺点是每次获取特定部位装备都需要检索Inventory，但好处
是在克隆时不会存在可能的错误克隆（如左戒指克隆到右戒指上）
现在应该可以生成尸体了
下一步装备武器
2016.04.09
有必要规范一下函数，变量名称，函数应该带有动词，并能和参数形成谓宾结构，变量应该为名词，私有变量前缀下划线，公有变量第一个字母大写
实现容貌，完善颜色代码
实现NPC死亡，考虑如何实现定时刷新
2016.04.10
实现NPC刷新，但会显示“……走了过来”，是否处理呢（已处理）
2016.04.11
实现房间物品刷新机制，比想象的复杂得多
下一步方向：实现金钱，物品交易
2016.04.12
实现金钱类，为虚类，与int互相隐式转换
实现物品交易，商人的负重无限大，卖价比率拟合值：7,25;15,40;20,50;25,60;27,80;30,85;35,100，前一个数字为口才，后一个为比率*100
下一步实现：使用者死亡，物品属性加成
人物属性（属性点总数）生成应服从正态分布
2016.04.14
人物属性点如果是动态的，玩家会不停选择以得到更好的，所以应为固定值
2016.04.26
迁移到swift上，比较重大的改动是clone方法变为构造器克隆，对象的构造由顶向下改为由下向顶，因为并没有memberwize方法可以调用
克隆的过程：类调用自身的带自身类型参数的构造器，获得一个克隆过的对象，该构造器为required并独立于其它构造器，因为一个属性在
克隆时的赋值与新建时的赋值并不能等同，所以不应该调用其它构造器，也就是说克隆构造器不应是一个便利构造器
2016.04.27
KObject现在支持Hashable协议
2016.04.29
逐渐移植代码中，其中重要的变化是去除了money类，改用extension扩展Int类型；将rivalList由array改为set
2016.04.30, 05.01
继续移植
2016.05.04
代码移植完成，纠正编译错误中
2016.05.06
通过init方式克隆会导致一个问题：在拷贝子类时，由于无法动态获取子类名称，所以只能克隆成基类，如存在一个KLibai_City对象，当要克隆时，程序只知道该对象的ID（npcnames.李白)以及基类KNPC，当用KNPC的构造函数克隆时，只能
得到一个具备基本属性的KNPC对象。
Clone方法则不存在这个问题，因为KLiBai_city的Clone方法知道该生成什么对象，即使该方法是通过downcast成KNPC后再调用的
将KRoom的物品和npc生成方式改为：定义[字符串:数量]字典，通过nsstringfromclass（）写入该房间要载入的npc类和数量，在实现时，利用NSClassFromString(v) as? KNPC.Type生成type，并调用KNPC.init函数生成对象
房间物品刷新时，也利用NSClassFromString生成KItem.Type，并调用Init函数，此时，物品的Init函数能正确被调用
2016.05.13
改变command的枚举为符合optionsettype的结构
2016.05.20
解决了颜色代码的解析问题
2016.05.21
添加circlemenu，去掉了转圈
2016.05.22
改进了menu，增加方向，房间内人物和物品的互动命令，现在看来需要增加三级菜单，一级为自己，方向，房间自身以及房间内人物和物品菜单，二级为选择人物或物品后弹出的列表、选择自己后弹出的命令列表（身上物品、状态、练功、等等），选择房间后弹出的房间命令列表（观察
2016.05.26
目前菜单情况如下：一级菜单中心为自己，按钮为方向及房间内人物与物品，点击自己及按钮后弹出二级菜单，二级菜单为人物与物品命令，点击后执行
需改进：菜单浮动在txtview之上，死亡后处理
2016.07.16
改进界面，现在是结构化的界面了
2016.07.23
界面框架的基本原理：
每个view可以包含子view，子view可动态加入也可在初始化时加入，子view的布局由refresh函数实现，在该函数内，应调用任何继承自自定义view的子view的refresh函数
2016.07.27
完成个人面板，完成技能面板框架，技能面板中按钮待定。开始战斗界面制作
2016.10.20
行动按钮移到下方，还待优化，似乎应该挪到roomdescview中。添加战斗界面中，战斗时屏幕上方出现对手列表，覆盖roomdescview，下方按钮变为：逃跑以及战斗技能
2016.11.01
完成describe的重构，现在是重载字串，代替原givplayerbrief功能
修改命令结构，现在命令统一包含所有可对物品的操作，如拾取，打开，制作，分解，采集，装备，卸载等，至于传回什么命令，由物体自己决定。界面现在只负责显示和传回相关值
2016.11.02
终于可以丢东西了
完成大部分功能框架，现在可以：装备物品，战斗，捡拾战利品
下一步：加入材料，专业技能，增加物品栏筛选功能，加入任务系统
专业技能初步设想：炼金（补剂，毒药，迷幻药），裁缝（布衣），奇门（机关陷阱），制皮（皮甲），锻造（重甲），珠宝（项链，戒指）
采集技能与制造技能配套，如学会了裁缝则能够分解布衣类材料，学会制皮则可以剥皮，学会锻造或珠宝就能挖矿
2016.11.16
完成制造业和大部分界面，condition暂未实现，下一步实现任务系统
任务系统架构：玩家具备任务列表，任务列表为字典，键值为任务id，值为一固定结构体，包含任务名称，描述，以及一个任务状态字符串，该字符串内容由对应的任务类负责解析。任务类应该是一个状态机，每个任务类负责维护玩家身上任务列表中自身的任务，以下分别说明各类型任务实现方式：
（1）杀常驻怪类：怪物死亡时触发身上所带的任务模块，模块检查玩家对应的任务id所对应的信息（为怪物数量，并为之加1），如果达到数量要求，提示任务完成，并结算奖励
（2）杀刷新怪类：房间在玩家进入时触发所带任务模块，如满足触发条件则生成怪物，怪物死亡时触发身上的任务模块，后续同（1）
（3）获取任务物品类：怪物死亡时触发模块，模块检查任务id对应信息，如满足掉落任务物品条件则根据掉率生成物品，物品被拾取后触发任务检查，如完成则结算奖励
（4）护送类：被护送npc在心跳中触发任务剧情以及检查任务是否失败和成功
任务查询界面：左侧为任务列表，右侧显示任务名称和信息，下方按钮为放弃
代码架构：玩家，怪物，物品，房间均只负责调用对应的任务类，具体的任务逻辑都在类处理引擎中实现，方便维护，任务类包含：任务id（手动给予，静态不变，全局唯一），任务处理函数processQuest，引擎本身维护一个列表，其中包含任务id和对应的处理函数，每个任务处理函数为状态机，根据不同的阶段对玩家进行操作
